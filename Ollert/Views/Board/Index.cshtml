@{
    ViewBag.Title = "Index";
}

@Html.Partial("_Tables")

<!-- Modal Ajout -->
@Html.Partial("_AddModal")

<!-- Modal Visualisation -->
@Html.Partial("_EditModal")

@section Scripts {
<script src="~/signalr/hubs"></script>
<script type="text/javascript">
    Dropzone.autoDiscover = false;

    function getNotifyIconUrl(type)
    {
        imgUrl = '';
        switch (type) {
            case 'NouveauMessage': imgUrl = '/Content/images/comment_add.png'; break;
            case 'SuppressionMessage': imgUrl = '/Content/images/comment_trash.png'; break;
            case 'MouvementCarte': imgUrl = '/Content/images/tag_move.png'; break;
            case 'NouvelleCarte': imgUrl = '/Content/images/tag_add.png'; break;
            case 'EditionCarte': imgUrl = '/Content/images/tag_info.png'; break;
            case 'SuppressionCarte': imgUrl = '/Content/images/tag_trash.png'; break;
            case 'AjoutFichier': imgUrl = '/Content/images/note_add.png'; break;
            case 'SuppressionFichier': imgUrl = '/Content/images/note_trash.png'; break;
            default: imgUrl = '/Content/images/notifyIcon.png';
        }

        return imgUrl;
    }
    var File = function (id, name, date, type, size) {
        this.id = id;
        this.name = name;
        this.date = date;
        this.type = type;
        this.size = size;
    };

    var User = function (id, name, lastViewed) {
        this.id = id;
        this.name = name;
        this.lastViewed = ko.observable(lastViewed);

        this.avatarPath = function () {
            return "/Board/AvatarImage/" + this.id;
        };
    };

    var Message = function (id, text, user, date, cardViewed) {
        this.id = id;
        this.text = ko.observable(text);
        this.user = ko.observable(user);
        this.date = ko.observable(date);
        this.cardViewed = cardViewed;

        this.isViewed = ko.computed(function () {
            if (this.cardViewed() != null)
                return this.date() > this.cardViewed();
            else
                return true;
        }, this);

        this.formattedDate = ko.computed(function () {
            var formattedDate = null;
            if (this.date() != null)
            {
                formattedDate = this.date().calendar();
            }
            return formattedDate;
        }, this);
    };

    var Card = function (id, demande, titre, description, user, estimation,/*events,*/ messages, currentUser, files, lastViewed) {
        var self = this;
        self.id = id;
        self.demande = ko.observable(demande);
        self.titre = ko.observable(titre);
        self.description = ko.observable(description);
        self.estimation = ko.observable(estimation);
        self.user = user;
        //self.evenements = events;
        self.currentUser = currentUser;
        self.messages = ko.observableArray(messages);
        self.files = ko.observableArray(files);
        self.lastViewed = ko.observable(lastViewed);

        self.isOwner = function (data) {
            return data.user().id == currentUser.id;

            return false;
        };

        self.deleteMessage = function (data) {
            $.ajax({
                url: '/api/Message/' + data.id,
                type: 'DELETE',
                dataType: 'json',
                success: function (jsonData) {
                    var msgToDeleteIndex = -1;
                    $.each(self.messages(), function (index, msg) {
                        if (msg.id == data.id)
                            msgToDeleteIndex = index;
                    });

                    console.log(msgToDeleteIndex);
                    if (msgToDeleteIndex >= 0)
                        self.messages.splice(msgToDeleteIndex, 1);
                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });

            return false;
        };

        self.UnreadMessages = ko.computed(function () {
            var unread = new Array();
            $.each(self.messages(), function (index, msg) {
                if (msg.date() > self.lastViewed())
                    unread.push(msg);
            });
            return unread;
        }, self);

        self.totalFiles = ko.computed(function () {
            return self.files().length;
        }, self);

        self.totalMessages = ko.computed(function () {
            return self.messages().length;
        }, self);

        self.totalUnreadMessages = ko.computed(function () {
            var nbNew = 0;
            $.each(self.messages(), function (index, msg) {
                if (msg.date() > self.lastViewed())
                    nbNew++;
            });
            return nbNew;
        }, self);

        self.totalUnseenFiles = ko.computed(function () {
            var nbNew = 0;
            $.each(self.files(), function (index, file) {
                if (file.date > self.lastViewed())
                    nbNew++;
            });
            return nbNew;
        }, self);

        self.hasUnseenFilesOrMsg = ko.computed(function () {
            return self.totalUnreadMessages() > 0 || self.totalUnseenFiles();
        }, self);

        self.totalUnseenFilesAndMsg = ko.computed(function () {
            return self.totalUnseenFiles() + self.totalUnreadMessages();
        }, self);

        this.toReadableTime = function () {
            var seconds = parseInt(this.estimation());
            var numyears = Math.floor(seconds / 31536000);
            var numdays = Math.floor((seconds % 31536000) / 86400);
            var numhours = Math.floor(((seconds % 31536000) % 86400) / 3600);
            var numminutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);
            var numseconds = (((seconds % 31536000) % 86400) % 3600) % 60;
            var output = (numyears > 0 ? numyears + " y " : '') + (numdays > 0 ? numdays + " d" : '') + (numhours > 0 ? numhours + " h" : '') + (numminutes > 0 ? numminutes + " m" : '') + (numseconds > 0 ? numseconds + " s" : '');
            return output.length == 0 ? '<non estimé>' : output;
        };

        this.hasTime = ko.computed(function () {
            return parseInt(this.estimation()) > 0;
        }, this);

        this.timeText = ko.computed(function () {
            return "Cette carte est éstimée a " + this.toReadableTime() + " de travail";
        }, this);

        this.messagesText = ko.computed(function () {
            return "Cette carte contient " + this.totalUnreadMessages().toString() + " messages";
        }, this);

        this.unseenFilesOrMsgText = ko.computed(function () {
            return "Cette carte contient " + this.totalUnreadMessages().toString() + " messages non lu et " + this.totalUnseenFiles() + " nouveaux fichiers";
        }, this);

        this.attachementsText = ko.computed(function () {
            return "Cette carte a " + this.totalFiles().toString() + " attachements";
        }, this);

        self.newMessage = ko.observable(new Message(1, "", self.currentUser, null, self.lastViewed));
        
        self.uploadFilePath = ko.computed(function () {
            return '/Api/Fichier/' + self.id;
        }, self);

        self.uploadId = function () {
            return 'dropzone-' + self.id;
        }

        self.addMessage = function (data) {
            var currentDate = moment();
            self.newMessage().date(currentDate);
                       

            var messageServeur = {
                Texte: self.newMessage().text(),
                Carte: { Id: self.id }
            };

            // Sauvegarde le message
            $.ajax({
                url: '/api/Message',
                type: 'POST',
                dataType: 'json',
                data: messageServeur,
                success: function (jsonData) {
                    // change la date de vue de la carte pour eviter la notification
                    self.lastViewed(moment());
                    // Change la date de vue de la carte
                    var carteServeur = {
                        Id: self.id,
                        NumeroDemande: self.demande(),
                        Titre: self.titre(),
                        Description: self.description(),
                        Estimation: self.estimation(),
                        LastTimeViewed: moment().format()
                    };

                    $.ajax({
                        url: '/api/Carte/' + self.id,
                        type: 'PUT',
                        dataType: 'json',
                        data: carteServeur,
                        success: function (jsonData) {

                        },
                        vstatusCode: {
                            404: function () {
                                alert('Erreur');
                            }
                        }
                    });
                    // Met a jour l'id du message
                    self.newMessage().id = jsonData.Id;
                    // Ajoute a la liste
                    self.messages.push(self.newMessage());

                    // Rebind avec un nouveeau message
                    self.newMessage(new Message(1, "", self.currentUser, currentDate, self.lastViewed));

                    //$('.dialogs,.comments').slimScroll({
                    //    height: '300px'
                    //});
                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });
        };

        // inline edit estimation
        self.editingEstimation = ko.observable(false);
        self.previousEstimation = 0;
        self.editEstimation = function () {
            self.previousEstimation = self.estimation();
            self.editingEstimation(true);
        };
        self.saveEstimation = function () {
            self.editingEstimation(false);
            self.saveEditedCard();
        };
        self.cancelEstimation = function () {
            self.estimation(self.previousEstimation);
            self.editingEstimation(false);
        };
        self.clearEstimation = function () {
            self.estimation(null);
            $('#edit-estimation').focus();
        };

        // inline edit titre
        self.editingTitre = ko.observable(false);
        self.previousTitre = '';
        self.editTitre = function () {
            self.previousTitre = self.titre();
            self.editingTitre(true);
        };
        self.saveTitre = function () {
            self.editingTitre(false);
            self.saveEditedCard();
        };
        self.cancelTitre = function () {
            self.titre(self.previousTitre);
            self.editingTitre(false);
        };
        self.clearTitre = function () {
            self.titre(null);
            $('#edit-titre').focus();
        };

        // inline edit description
        self.editingDescription = ko.observable(false);
        self.previousDescription = '';
        self.editDescription = function () {
            self.previousDescription = self.description();
            self.editingDescription(true);
        };
        self.saveDescription = function () {
            self.editingDescription(false);
            self.saveEditedCard();
        };
        self.cancelDescription = function () {
            self.description(self.previousDescription);
            self.editingDescription(false);
        };

        self.saveEditedCard = function () {
            // Sauvegarde le changement sur le serveur
            var carteServeur = {
                Id: self.id,
                NumeroDemande: self.demande(),
                Titre: self.titre(),
                Description: self.description(),
                Estimation: self.estimation(),
                LastTimeViewed: self.lastViewed().format()
            };
            $.ajax({
                url: '/api/Carte/' + self.id,
                type: 'PUT',
                dataType: 'json',
                data: carteServeur,
                success: function (jsonData) {
                    // Envoi le changement au serveur signalr

                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });
        };
    };

    var Table = function (id, name, cards) {
        var self = this;
        self.cards = ko.observableArray(cards);
        self.name = name;
        self.id = id;
        self.cards.id = id;

        self.deleteCard = function (data, event) {
            event.stopImmediatePropagation();
            $.ajax({
                url: '/api/Carte/' + data.id,
                type: 'DELETE',
                dataType: 'json',
                success: function (jsonData) {
                    var indexToRemove = -1;
                    // Envoi du nouveau message au serveur signalr
                    $.each(self.cards(), function (index, card) {
                        if (card.id == data.id)
                            indexToRemove = index;
                    });
                    console.log(indexToRemove);
                    if (indexToRemove >= 0)
                        self.cards.splice(indexToRemove, 1);
                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });

            return false;
        };

        self.hasCards = ko.computed(function () {
            return self.cards().length > 0;
        }, self);

        self.totalTime = ko.computed(function () {
            var total = 0;
            $.each(self.cards(), function (index, el) {
                total += parseInt(el.estimation());
            });

            var seconds = total;
            var numyears = Math.floor(seconds / 31536000);
            var numdays = Math.floor((seconds % 31536000) / 86400);
            var numhours = Math.floor(((seconds % 31536000) % 86400) / 3600);
            var numminutes = Math.floor((((seconds % 31536000) % 86400) % 3600) / 60);
            var numseconds = (((seconds % 31536000) % 86400) % 3600) % 60;
            return (numyears > 0 ? numyears + " y " : '') + (numdays > 0 ? numdays + " d" : '') + (numhours > 0 ? numhours + " h" : '') + (numminutes > 0 ? numminutes + " m" : '') + (numseconds > 0 ? numseconds + " s" : '');
        }, self);
    };

    var Notification = function (id, type, title, text, date, lastUserViewed, creator) {
        this.id = id;
        this.type = type;
        this.title = title;
        this.text = text;
        this.date = date;
        this.lastUserViewed = lastUserViewed;
        this.creator = creator;

        this.isNotifViewed = ko.computed(function () {
            if (this.lastUserViewed != null) {
                return this.date > this.lastUserViewed;
            }
            else
                return true;
        }, this);

        this.formattedDate = ko.computed(function () {
            return this.date.calendar();
        }, this);
        this.notificationImgUrl = ko.computed(function () {
            var imgUrl = getNotifyIconUrl(this.type);

            return imgUrl;
        }, this);
    };

    var BoardModel = function (tables, currentUser, notifications) {
        var self = this;
        self.tables = ko.observableArray(tables);
        self.lastAction = ko.observable();
        self.lastError = ko.observable();
        self.maximumCards = 100;
        self.currentUser = ko.observable(currentUser);

        self.connectedUsers = ko.observableArray();

        self.newMessages = ko.computed(function () {
            var newMsg = new Array();
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    $.each(card.UnreadMessages(), function (indexMsg, msg) {
                        newMsg.push(msg);
                    });
                });
            });

            return newMsg;
        });

        self.lastMessages = ko.computed(function () {
            var newMsg = new Array();
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    $.each(card.messages(), function (indexMsg, msg) {
                        newMsg.push(msg);
                    });
                });
            });

            return newMsg.sortBy(function(o){ return o.date() }).slice(0, 8);
        });

        self.newMessagesNumber = ko.computed(function () {
            var newMsgNumber = 0;
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    newMsgNumber += card.totalUnreadMessages();
                });
            });
            return newMsgNumber;
        }, self);

        self.notifications = ko.observableArray(notifications);
        self.totalnotifications = ko.computed(function () {
            return self.notifications().length;
        }, self);

        self.totalNewNotifications = ko.computed(function () {
            var newNotif = 0;
            var currentUserDate = self.currentUser().lastViewed();
            $.each(self.notifications(), function (indexNotif, notif) {
                if (notif.date > currentUserDate && notif.creator.id != self.currentUser().id)
                    newNotif++;
            });

            return newNotif;
        }, self);

        self.declareNotifAsSeen = function () {
            $.ajax({
                url: '/Board/UserLastSeen/',
                type: 'GET',
                dataType: 'json',
                success: function () {
                    self.currentUser().lastViewed(moment());
                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });
        };

        self.lastNotifications = ko.computed(function () {
            return self.notifications.slice(0, 6);
        }, self);

        self.dialogNewCard = ko.observable(new Card(0, null, null, "", self.currentUser(), null, null, self.currentUser(), null, moment()));
        self.dialogCurrentCard = ko.observable();
        self.dialogCurrentTable = ko.observable();
        

        self.isTableFull = function (parent) {
            return parent().length < self.maximumCards;
        };

        self.addCard = function () {
            if (self.dialogNewCard().description() == '')
            {
                self.dialogNewCard().description('<pas de description>');
            }

            // sauvegarde la nouvelle carte
            var carteServeur = {
                NumeroDemande: self.dialogNewCard().demande(),
                Titre: self.dialogNewCard().titre(),
                Description: self.dialogNewCard().description(),
                Estimation: self.dialogNewCard().estimation(),
                LastTimeViewed: moment().format(),
                Tableau: { Id: self.dialogCurrentTable().id } 
            };
            $.ajax({
                url: '/api/Carte',
                type: 'POST',
                dataType: 'json',
                data: carteServeur,
                success: function (jsonData) {
                    // Change la date de vue de l' utilisateur pour eviter les alertes
                    self.currentUser().lastViewed(moment());

                    // Met a jour l'id de la carte
                    var nouvelleCarte = self.dialogNewCard();
                    nouvelleCarte.id = jsonData.Id;
                    // Ajoute a la liste
                    self.dialogCurrentTable().cards.push(nouvelleCarte);

                    // Rebind avec une nouvelle carte
                    self.dialogNewCard(new Card(0, null, null, "", self.currentUser(), null, null, self.currentUser(), null, moment()));

                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });

            $('#modal-ajout').modal('hide');
        };

        self.openCardDetails = function (data) {
            self.dialogCurrentTable(data);
            $('#modal-ajout').modal('show');
        };

        self.editCard = function (data) {
            self.dialogCurrentCard(data);
            // Change la date de vue de la carte
            var carteServeur = {
                Id: self.dialogCurrentCard().id,
                NumeroDemande: self.dialogCurrentCard().demande(),
                Titre: self.dialogCurrentCard().titre(),
                Description: self.dialogCurrentCard().description(),
                Estimation: self.dialogCurrentCard().estimation(),
                LastTimeViewed: moment().format()
            };

            $.ajax({
                url: '/api/Carte/' + self.dialogCurrentCard().id,
                type: 'PUT',
                dataType: 'json',
                data: carteServeur,
                success: function (jsonData) {
                    
                },
                vstatusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });

            self.dialogCurrentCard().lastViewed(moment());

            $('#modal-visualisation').modal('show');
            //$('.dialogs,.comments').slimScroll({
            //    height: '300px'
            //});

            //try {                
                var dropzoneObject = new Dropzone("#dropzone-" + data.id, {
                    paramName: 'file',
                    method: 'POST',
                    maxFilesize: 50, // MB
                    addRemoveLinks: true,
                    dictDefaultMessage: '<span class="bolder"><i class="icon-caret-right red"></i> Drop files</span> to upload  <span class="smaller-80 grey">(or click)</span> <br />  <i class="upload-icon icon-cloud-upload blue icon-3x"></i>',
                    dictResponseError: 'Erreur d\'upload!',
                    dictRemoveFile: 'supprimer',
                    dictCancelUpload: 'annuler',
                    init: function () {
                        this.on("removedfile", function (file) {
                            $.ajax({
                                url: '/api/Fichier/' + file.id,
                                type: 'DELETE',
                                dataType: 'json',
                                statusCode: {
                                    404: function () {
                                        alert('Erreur');
                                    }
                                }
                            });
                            var fileIndex = 0;
                            $.each(data.files(), function (index, f) {
                                if (f.id == file.id)
                                    fileIndex = index;
                            });
                            data.files.splice(fileIndex, 1);
                        });

                        this.on("success", function (file, response) {
                            file.id = response.id;
                            data.files.push(new File(response.Id, response.Nom, moment(response.DateEnvoi), response.Type, response.FileSize));
                        });

                        this.on("sending", function (file, xhr, formData) {
                            formData.append('cardId', data.id);
                        });
                    },                   
                    //change the previewTemplate to use Bootstrap progress bars
                    previewTemplate: "<div class=\"dz-preview dz-file-preview\">\n<div class=\"dz-details\">\n<div class=\"dz-filename\"><span data-dz-name></span></div>\n    <div class=\"dz-size\" data-dz-size></div>\n    <img data-dz-thumbnail />\n  </div>\n  <div class=\"progress progress-small progress-striped active\"><div class=\"progress-bar progress-bar-success\" data-dz-uploadprogress></div></div>\n  <div class=\"dz-success-mark\"><span></span></div>\n  <div class=\"dz-error-mark\"><span></span></div>\n  <div class=\"dz-error-message\"><span data-dz-errormessage></span></div>\n</div>"
                });
                
                // Add files
                $.each(data.files(), function (index, f) {
                    mockFile = {
                        id: f.id,
                        name: f.name,
                        size: f.size
                    };

                    // Call the default addedfile event handler
                    dropzoneObject.emit("addedfile", mockFile);

                    // And optionally show the thumbnail of the file:
                    dropzoneObject.emit("thumbnail", mockFile, "/Board/DownloadFile/" + f.id);
                });

                $('.dz-details').click(function () {
                    var alt = $(this).find('img').attr('alt');
                    $(this).find('img').attr('title', alt);
                    var url = $(this).find('img').attr('src') + '?download=true';
                    window.open(url, "_blank")
                });

            //} catch (e) {
            //    console.log(e);
            //    alert('L\'upload de fichier ne supporte pas ce navigateur! ' + e.Message);
            //}
        };

        self.updateLastAction = function (arg) {
            // sauvegarde le deplacement sur el serveur
            var deplacementServeur = {
                    CarteId: arg.item.id,
                    AncienTableauId: arg.sourceParent.id,
                    NouveauTableauId: arg.targetParent.id
            };
            $.ajax({
                url: '/api/Tableau/' + arg.item.id,
                type: 'PUT',
                dataType: 'json',
                data: deplacementServeur,
                success: function (jsonData) {
                    // Envoi le deplacement au serveur signalr   

                },
                statusCode: {
                    404: function () {
                        alert('Erreur');
                    }
                }
            });
        };

        self.desktopNotification = function notify(titre, message, type) {
            if (window.webkitNotifications != null) {
                var havePermission = window.webkitNotifications.checkPermission();
                if (havePermission == 0) {
                    // 0 is PERMISSION_ALLOWED
                    var notification = window.webkitNotifications.createNotification(
                      getNotifyIconUrl(type),
                      titre,
                      message
                    );

                    notification.onclick = function () {
                        //window.open("http://stackoverflow.com/a/13328397/1269037");
                        notification.close();
                    }
                    notification.show();
                } else {
                    // Standard html notification
                    var unique_id = $.gritter.add({
                        title: titre,
                        text: message + '<br/><a href="javascript:window.webkitNotifications.requestPermission()">Notifications Chrome</a>',
                        image: getNotifyIconUrl(type),
                        sticky: false,
                        //time: '',
                        class_name: 'gritter-info'
                    });

                    window.webkitNotifications.requestPermission();
                }
            }
            else
            {
                // Standard html notification
                var unique_id = $.gritter.add({
                    title: titre,
                    text: message,
                    image: getNotifyIconUrl(type),
                    sticky: true,
                    //time: '',
                    class_name: 'gritter-info'
                });

                return false;
            }
        };

        $.connection.ollertHub.client.newNotification = function (note) {
            if (note.Type != "NouveauMessage") {
                $('#notif-icon').removeClass('icon-animated-bell');
                $('#notif-icon').addClass('icon-animated-bell');
                var newUser = new User('00', 'noname');;
                if (note.Createur != null)
                    newUser = new User(note.Createur.Id, note.Createur.UserName);
                self.notifications.unshift(new Notification(note.Id, note.Type, note.Titre, note.Texte, moment(note.Date), self.currentUser().lastViewed(), newUser));
                self.desktopNotification(note.Titre, note.Texte, note.Type);
            }
        };

        $.connection.ollertHub.client.newMessage = function (message) {
            $('#comment-icon').removeClass('icon-animated-vertical');
            $('#comment-icon').addClass('icon-animated-vertical');
            
            //self.newMessages.push(messageServeur);
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if (message.CarteId == card.id) {
                        var messageServeur = new Message(message.Id, message.Texte, new User(message.Utilisateur.Id, message.Utilisateur.UserName), moment(message.CreateOn), card.lastViewed);
                        card.messages.push(messageServeur);
                    }
                });
            });

            self.desktopNotification('Nouveau message', message.Texte);
        };

        $.connection.ollertHub.client.newMove = function (move) {
            var carte = null;
            var carteIndex = null;
            $.each(self.tables(), function (indexTable, table) {
                if (table.id == move.AncienTableauId) {
                    $.each(table.cards(), function (indexCard, card) {
                        if (card.id == move.CarteId) {
                            carte = card;
                            carteIndex = indexCard;
                        }
                    });

                    // Retire la carte de son ancien emplacement
                    table.cards.splice(carteIndex, 1);
                }

            });

            $.each(self.tables(), function (indexTable, table) {
                if (table.id == move.NouveauTableauId) {
                    table.cards.push(carte);
                }
            });
        };

        $.connection.ollertHub.client.newCard = function (card) {
            $.each(self.tables(), function (indexTable, table) {
                if (table.id == card.TableauId) {
                    table.cards.push(new Card(carte.Id, carte.NumeroDemande, carte.Titre, carte.Description, null, null, null, self.currentUser(), null, moment(carte.LastTimeViewed)));
                }
            });
        };

        $.connection.ollertHub.client.changeCard = function (carte) {
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if(card.id == carte.Id)
                    {
                        card.demande(carte.NumeroDemande);
                        card.estimation(carte.Estimation);
                        card.titre(carte.Titre);
                        card.description(carte.Description);
                    }
                });
            });
        };

        $.connection.ollertHub.client.addFile = function (fichier) {
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if (card.id == fichier.CarteId) {
                        card.files.push(new File(fichier.Id, fichier.Nom, moment(fichier.DateEnvoi), fichier.Type, fichier.FileSize));
                    }
                });
            });
        };

        $.connection.ollertHub.client.deleteFile = function (fichier) {
            var indexFichier = null;
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if (card.id == fichier.CarteId) {
                        $.each(card.files(), function (indexFile, file) {
                            if (file.id == fichier.Id)
                                indexFichier = indexFile;
                        });

                        if (indexFichier != null)
                            card.files.splice(indexFichier, 1);
                    }
                });
            });
        };

        $.connection.ollertHub.client.deleteMessage = function (message) {
            var indexMessage = null;
            console.log(message);
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if (card.id == message.CarteId) {
                        $.each(card.messages(), function (indexMsg, msg) {
                            if (msg.id == message.Id)
                                indexMessage = indexMsg;
                        });

                        if (indexMessage != null)
                            card.messages.splice(indexMessage, 1);
                    }
                });
            });
        };

        $.connection.ollertHub.client.deleteCard = function (carte) {
            var indexCarte = null;
            var tableLocal = null;
            $.each(self.tables(), function (indexTable, table) {
                $.each(table.cards(), function (indexCard, card) {
                    if (card.id == carte.Id) {
                        indexCarte = indexCard;
                        tableLocal = table;
                    }
                });
            });

            console.log(tableLocal);
            if (indexCarte != null)
                tableLocal.cards.splice(indexCarte, 1);
        };

        $.connection.ollertHub.client.onConnected = function (users) {
            $.each(users, function (indexU, newUser) {
                var isPresent = false;
                $.each(self.connectedUsers(), function (indexC, user) {
                    if (newUser.UserId == user.id)
                        isPresent = true;
                });
                if (!isPresent)
                    self.connectedUsers.push(new User(newUser.UserId, newUser.UserName, null));
            });
        };

        $.connection.ollertHub.client.onDisconnected = function (users) {
            $.each(self.connectedUsers(), function (indexU, oldUser) {
                var oldUserIndex = -1;
                $.each(users, function (indexC, user) {
                    if (oldUser.id == user.UserId)
                        oldUserIndex = indexC;
                });
                if (oldUserIndex >= 0)
                    self.connectedUsers.splice(oldUserIndex, 1);
            });
        };
    };


    ///////////////////////////// INITIALIZATION
    function initilize() {
        moment.lang('fr');
        $.get('/Board/CurrentUser', function (userJson) {
            var currentUser = new User(userJson.Id, userJson.UserName, moment(userJson.LastViewed));

            $.ajax({
                url: '/api/Tableau',
                type: 'GET',
                dataType: 'json',
                success: function (json) { onLoadingSuccess(json, currentUser) },
                statusCode: {
                    404: function () {
                        alert('impossible de se connecter au serveur');
                    }
                }
            });

        });
    }

    function onLoadingSuccess(jsonData, currentUser) {
        var initialTables = new Array();
        $.each(jsonData, function (index, tableau) {
            var cartes = new Array();
            $.each(tableau.Cartes, function (index, carte) {
                var messages = new Array();
                $.each(carte.Messages, function (index, message) {
                    var newMessage = new Message(message.Id, message.Texte, new User(message.Utilisateur.Id, message.Utilisateur.UserName), moment(message.CreateOn), ko.observable(moment(carte.LastTimeViewed)));
                    //console.log(message);
                    messages.push(newMessage);
                });

                //var evenement = new Event(messages.length, 0, 0, 0, 0, carte.Estimation);

                var fichiers = new Array();
                $.each(carte.Fichiers, function (index, fichier) {
                    fichiers.push(new File(fichier.Id, fichier.Nom, moment(fichier.DateEnvoi), fichier.Type, fichier.FileSize));
                });
                var newCard = new Card(carte.Id, carte.NumeroDemande, carte.Titre, carte.Description, null, carte.Estimation, messages, currentUser, fichiers, moment(carte.LastTimeViewed));
                //console.log(carte);
                cartes.push(newCard);
            });

            initialTables.push(new Table(
                tableau.Id,
                tableau.Nom,
                cartes
            ));
        });

        var notifications = new Array();
        // Les notifications
        $.ajax({
            url: '/api/Notification',
            type: 'GET',
            dataType: 'json',
            success: function (notif) {
                $.each(notif, function (index, note) {
                    var newUser = new User('00', 'noname');
                    if (note.Createur != null)
                        newUser = new User(note.Createur.Id, note.Createur.UserName);
                    notifications.push(new Notification(note.Id, note.Type, note.Titre, note.Texte, moment(note.Date), currentUser.lastViewed(), newUser));
                });

                var vm = new BoardModel(initialTables, currentUser, notifications);

                //ko.bindingHandlers.sortable.beforeMove = vm.verifyAssignments;
                ko.bindingHandlers.sortable.afterMove = vm.updateLastAction;

                ko.applyBindings(vm);

                // Start the connection
                $.connection.hub.start().done(function () {
                    $.cookie("signalr-conn-id", $.connection.hub.id);
                });
            },
            statusCode: {
                404: function () {
                    alert('Erreur');
                }
            }
        });
    }


    ////////// CHARGEMENT
    $(window).bind("load", function () {        
        //$.connection.hub.logging = true;
        // Start the connection
        //$.connection.hub.start().done(function () {
        //    $.connection.ollertHub.server.newMove();
        //});

        initilize();
    });

    
</script>
}